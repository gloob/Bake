#!/bin/bash
# This configure file was generated by Bake @@bake_version@@ at @@now@@.
# It will only work properly with a Bash shell.
# Do not edit this file directly.

if test x"$BASH_VERSION" = "x"; then
    echo "This configure script must be run by a Bash-compatible shell."
    exit 1
fi

SED=${SED-`which sed`}
CMAKE=${CMAKE-`which cmake`}
CMAKEFLAGS=${CMAKEFLAGS-"-Wno-dev"}

declare -a package_options
@@package_options@@

declare -a mapped_env
mapped_env=(
    [0]='CC'        [1]='CMAKE_C_COMPILER:STRING'
    [2]='CXX'       [3]='CMAKE_CXX_COMPILER:STRING'
    [4]='F77'       [5]='CMAKE_Fortran_COMPILER:STRING'
    [6]='LIBS'      [7]='CMAKE_LINK_LIBRARIES:STRING'
    [8]='CFLAGS'    [9]='CMAKE_C_FLAGS:STRING'
    [10]='CXXFLAGS' [11]='CMAKE_CXX_FLAGS:STRING'
    [12]='F77FLAGS' [13]='CMAKE_Fortran_FLAGS:STRING'
    [14]='LDFLAGS'  [15]='CMAKE_LINK_FLAGS:STRING'
)

while test "$#" -gt 0
do
    arg=$1
    shift
    
    case $arg in
        *=*)
            opt=`echo "$arg" | $SED -e 's/=.*//'`
            optarg=`echo "$arg" | $SED -e 's/[-_a-zA-Z0-9]*=//'`
            ;;
        *)
            opt=$arg
            optarg=
            ;;
    esac
    
    case $arg in
        --help)
            opts_help=
            s='                                                                              '
            for (( i=0 ; i < ${#package_options[*]} ; i = i + 2 )); do
                # 33 (align) - 4 (indent) - length of flag
                n=${s:0:$((29-${#package_options[$i]}))}
                opts_help="$opts_help
    ${package_options[$i]}$n${package_options[$((i+1))]}"
            done
            cat <<HELP
Configuration for @@project_name@@.

This configure script is a wrapper around the CMake build system, designed for
simple use by those familiar with autoconf-style builds. It was generated by
the Bake wrapper tool.

Usage: $0 [OPTION] ... [VAR=VALUE] ...

Configure options:
    --help                      Display this help and exit.
    --version                   Display version information and exit.
    --cache-file=FILE           A CMake cache file [none]
    --generator=GENERATOR       A CMake generator name [Unix Makefiles]
    --with-cmake=PATH           Use CMake executable at PATH [search \$PATH]

Installation options:
    --prefix=PREFIX             Install files in PREFIX [/usr/local]
    --program-prefix=PREFIX     preprend PREFIX to all installed executables
    --program-suffix=SUFFIX     append SUFFIX to all installed executables
    --program-transform-name=REGEX
                                apply CMake REGEX to installed executables

Package options:
$opts_help

Recognized environment variables:
    CC                          C compiler command
    CXX                         C++ compiler command
    F77                         Fortran compiler command
    CFLAGS                      C compiler flags
    CXXFLAGS                    C++ compiler flags
    F77FLAGS                    Fortran compiler flags
    LIBS                        Extra libraries for linking
    LDFLAGS                     Linker flags

HELP
            exit
            ;;
        --version)
            cat <<VERS
Configuration for @@project_name@@.
Generated at @@now@@ by Bake version @@bake_version@@.
This script is distributed under the license of the project for which it was
generated, or Bake's license, whichever is less permissive. Bake is
distributed under the two-clause BSD license. See Bake's website for more
details.
Bake is available at @@bake_url@@.
VERS
            exit
            ;;
        --cache-file=*)
            CMAKEFLAGS="$CMAKEFLAGS -C $optarg"
            ;;
        --generator=*)
            CMAKEFLAGS="$CMAKEFLAGS -G $optarg"
            ;;
        --with-cmake=*)
            if test -x $optarg; then
                CMAKE=$optarg
            else
                echo "No CMake executable found at $optarg."
                exit
            fi
            ;;
        --prefix=*)
            CMAKEFLAGS="$CMAKEFLAGS -DCMAKE_INSTALL_PREFIX:STRING=$optarg"
            ;;
        --program-prefix=*|--program-suffix=*|--program-transform-name=*)
            echo "Program name transformations are not supported at this time."
            exit
            ;;
        --*)
            found=
            for (( i=0 ; i < ${#package_options[*]} ; i = i + 2 )); do
                if test x"${package_options[$i]}" = x"$opt"; then
                    CMAKEFLAGS="$CMAKEFLAGS -D${package_options[$((i+1))]}=$optarg"
                    found=1
                fi
            done
            if test x"$found" = "x"; then
                echo "Unknown option $arg."
                exit
            fi
            ;;
        *=*)
            found=
            for (( i=0; i < ${#mapped_env[*]} ; i = i + 2 )); do
                if test x"${mapped_env[$i]}" = x"$opt"; then
                    CMAKEFLAGS="$CMAKEFLAGS -D${mapped_env[$((i+1))]}=$optarg"
                    found=1
                fi
            done
            if test x"$found" = "x"; then
                export $opt="$optarg"
            fi
            ;;
        *)
            echo "Unknown option $arg."
            exit
            ;;
    esac
done

echo "Executing CMake:"
echo $CMAKE $CMAKEFLAGS
$CMAKE $CMAKEFLAGS
